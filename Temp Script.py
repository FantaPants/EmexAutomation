# -*- coding: utf-8 -*-
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import NoAlertPresentException
import unittest, time, datetime, re, os, tempfile, shutil, glob
import dates
import logger
import client_variables

def move_file():
    """Move file function to be used at any point where file created
    from download needs to be moved to client specific folder"""
    source = client_variables.output_folder
    destination = client_variables.client_folder
    copyfiles = os.listdir(source)
    ext = (".xlsx", ".csv", ".pdf", ".png")

    for copyfile in copyfiles:
        if copyfile.endswith(ext):
            copyfile = source + "/" + copyfile
            print "copying", copyfile
            shutil.move(copyfile, destination)
        elif copyfile.startswith('GetTotalByYearReport'):
            copyfile = source + "/" + copyfile
            print "copying", copyfile
            shutil.move(copyfile, destination)
  
class Test_005_VFL_Reports(unittest.TestCase):
    """Set of tests responsible for testing the various VFL reports available to the user."""
    def setUp(self):
        """Setup edited so that its uses a specific firefox profile called 'auto_test_profile'.
        When using this firefox profile the user will not be prompted when downloading specific
        file types, such as .xlsx and .csv. Lines were left in but commented out that control
        the setup and tear down of a temp directory to be used for downloads. This approach might
        be revisited at a later stage."""
        #add a temporary folder
        #temp_dir = os.mkdir(client_variables.temp_folder, 0755)
        auto_test_profile = webdriver.FirefoxProfile("C:/Users/rhoward.EMEX/AppData/Roaming/Mozilla/Firefox/Profiles/kz6phe2o.auto_test_profile")
        self.driver = webdriver.Firefox(firefox_profile=auto_test_profile)
        self.driver.implicitly_wait(30)
        self.base_url = client_variables.base_url
        self.verificationErrors = []
        self.accept_next_alert = True

    def test_036_vfl_summary_report(self):
        """Test generates a VFL Summary Report. No output file is generated by this report, so only capturing
        a screengrab can be used to ensure the report was correctly generated during testing."""
        driver = self.driver
        driver.get(self.base_url + "/")
        #Login to the application
        driver.find_element_by_name("UserName").clear()
        driver.find_element_by_name("UserName").send_keys(client_variables.username1)
        driver.find_element_by_name("Password").clear()
        driver.find_element_by_name("Password").send_keys(client_variables.pword1)
        driver.find_element_by_css_selector("button.btn.btn-primary").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully logged into application')
        time.sleep(5)
        #Edit first VFL record in list, adding acts with comments, attachments and actions
        driver.find_element_by_xpath("//*[@id='dtVFL']/tbody/tr[1]/td[8]/div[2]/div/a[2]/i").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully verified that Edit VFL button works')
        time.sleep(1)
        #Move successfully to the next tab
        driver.find_element_by_id("btnNextSubmit").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully proceeded to Finish tab')
        time.sleep(1)
        #Add a Safe Act of type 1
        driver.find_element_by_xpath("//*[@id='formActs']/div/section[1]/div/label[1]/i").click()
        Select(driver.find_element_by_id("Acts")).select_by_visible_text(client_variables.act_type1)
        driver.find_element_by_id("btnSubmitFormActs").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully added a Safe Act')
        time.sleep(2)
        #Add a Conversation & attach an image
        driver.find_element_by_css_selector("i.fa.fa-comment-o.glyphicon-size").click()
        time.sleep(1)
        driver.find_element_by_xpath("//*[@id='Comment']").click()
        time.sleep(1)
        driver.find_element_by_xpath("//*[@id='Comment']").send_keys("Testing adding conversations")
        time.sleep(1)
        driver.find_element_by_xpath("//*[@id='btnAdd_Files']/input[@type='file']").send_keys("V:\QA\Automation\Automation_Resources\Attachments\Conversation Image\PM5544_with_non-PAL_signals.png")
        time.sleep(5)  
        driver.find_element_by_id("submit_modalConversation").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully added a conversation')
        time.sleep(1)
        #Add an Action
        driver.find_element_by_css_selector("i.fa.fa-file-text-o.glyphicon-size").click()
        time.sleep(1)
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully verifued that Add Action button works')
        #Select Due Date
        driver.find_element_by_xpath("//*[@id='DueDate']").send_keys(dates.today())
        driver.find_element_by_xpath("//*[@id='DueDate']").send_keys(Keys.RETURN)
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully selected Due Date')
        time.sleep(2)
        #Select Priority
        Select(driver.find_element_by_xpath("//*[@id='Priority']")).select_by_visible_text("Low")
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully selected Priority')
        time.sleep(2)
        #Add a Description
        driver.find_element_by_xpath("//*[@id='Description']").click()
        driver.find_element_by_xpath("//*[@id='Description']").send_keys("testing automated VFL Corrective Actions")
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully added a description to the Action')
        time.sleep(1)
        #Select an AssignedTo user
        driver.find_element_by_xpath("//*[@id='s2id_autogen1']").click()
        driver.find_element_by_xpath("//*[@id='s2id_autogen1']").send_keys(client_variables.username2)
        time.sleep(5)
        driver.find_element_by_xpath("//*[@id='s2id_autogen1']").send_keys(Keys.RETURN)
        time.sleep(1)
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully selected buuser as AssignedTo user')
        #Save the Action
        driver.find_element_by_xpath("//*[@id='submit_modalAction']").click()
        time.sleep(5)
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully Saved Action')
        #Select the finish button to return to the Main List View
        driver.find_element_by_link_text("Finish").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully saved changes to VFL record')
        #Assert the Print Report button is disabled by default
        elem = driver.find_element_by_xpath("//*[@id='printVfl']")
        print_disabled = elem.get_attribute("disabled")
        assert print_disabled == "true"
        time.sleep(1)
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully verified that print button is disbabled by default')
        #Select the first VFL record and choose the Print Report button
        driver.find_element_by_xpath("//*[@id='dtVFL']/tbody/tr[1]/td[1]/input").click()
        time.sleep(1)
        driver.find_element_by_xpath("//*[@id='printVfl']").click()
        time.sleep(3)
        #Take a screengrab of the generated report
        driver.switch_to_window(driver.window_handles[-1])
        time.sleep(2)
        driver.get_screenshot_as_file('V:/QA/Automation/Automation_Resources/Output/summary_report.png')
        #driver.get_screenshot_as_file('V:/QA/Automation/Automation_Resources/Output/summary_report:' + dates.today() + '.png')
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully took a screenshot of report')
        time.sleep(3)
        #Copy the screengrab to the client specific output folder
        move_file()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully moved screenshot of report into client specific folder')
        time.sleep(2)
        #Log out of the application
        driver.switch_to_window(driver.window_handles[0])
        time.sleep(2)
        driver.find_element_by_css_selector("i.fa.fa-power-off").click()
        driver.find_element_by_id("bot2-Msg1").click()
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:Successfully logged out')
        logger.log_to_file('Test_VFL_Module:test036_vfl_summary_report:TEST COMPLETED', 'PASSED')
        
    def is_element_present(self, how, what):
        try: self.driver.find_element(by=how, value=what)
        except NoSuchElementException, e: return False
        return True
    
    def is_alert_present(self):
        try: self.driver.switch_to_alert()
        except NoAlertPresentException, e: return False
        return True
    
    def close_alert_and_get_its_text(self):
        try:
            alert = self.driver.switch_to_alert()
            alert_text = alert.text
            if self.accept_next_alert:
                alert.accept()
            else:
                alert.dismiss()
            return alert_text
        finally: self.accept_next_alert = True
    
    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)
        #remove the temporary folder
        #shutil.rmtree(client_variables.temp_folder)
        

if __name__ == "__main__":
    unittest.main()
